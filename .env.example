# Generate cookie with `python -c 'import os,base64; print(base64.urlsafe_b64encode(os.urandom(32)).decode())'`
OAUTH2_PROXY_COOKIE_SECRET="CHANGEME"

# Get these from GCP -> APIs and Services -> Credentials -> OAuth 2.0 Client ID (type web)
# See README.md and Oauth-Proxy docs for details
OAUTH2_PROXY_CLIENT_ID="CHANGEME"
OAUTH2_PROXY_CLIENT_SECRET="CHANGEME"

# Logo image file (relative to config/oauth directory)
OAUTH_LOGO="vtt-512.png"

# ports (these shouldn't need to be changed)
FVTT_PORT=30000
HTTP_PORT=80
NGINX_LOCAL_PORT=8000
HTTPS_PORT=443
OAUTH_PROXY_PORT=4128
DDB_PROXY_PORT=3333

# Used in nginx config - must be real FQDN (or hosts config) required for SSL
FQDN="CHANGEME"

# local server (nginx listens traffic on port 80 at this host instead of forwarding to ssl)
NGINX_LOCAL_SERVER="CHANGEME"

# Descriptive names written into self signed certs
SSL_CERT_ORG="CHANGEME"
SSL_CERT_UNIT="CHANGEME"

# use http://oauth:$OAUTH_PROXY_PORT (for oauth)
# or http://fvtt:$FVTT_PORT (if running w/o oauth - i.e. local server for tabletop display)
NGINX_PROXY_UPSTREAM="http://oauth:$OAUTH_PROXY_PORT"

# options for docker compose (include with -f)
# (if using any options, must include docker-compose.yml)
# - docker-compose.local.yml - add local port to nginx instance
# - docker-compose.certbot.yml - `certbot` service config (used by `vtt update-certs`)
# - docker-compose.oauth.yml - `oauth` service config (to run on aws)
#COMPOSE_OPTS="-f docker-compose.yml -f docker-compose.local.yml"
#COMPOSE_OPTS="-f docker-compose.yml -f docker-compose.oauth.yml"
